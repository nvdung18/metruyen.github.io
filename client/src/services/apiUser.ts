import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { RootState } from '@/lib/redux/store';

// --- Base Query Setup ---
const apiBaseQuery = fetchBaseQuery({
  baseUrl: 'http://localhost:8080',
  prepareHeaders: (headers, { getState }) => {
    const state = getState() as RootState;
    const token = state.auth?.tokens;
    const clientId = state.auth?.clientId;

    // Set auth headers if token and clientId exist
    if (token?.access_token && clientId) {
      headers.set('Authorization', `Bearer ${token.access_token}`);
      headers.set('x-client-id', String(clientId));
    }

    return headers;
  }
});

// --- Type Definitions ---
// Generic API response structure
interface ApiResponse<T> {
  status: boolean;
  path: string;
  statusCode: number;
  statusReason: string;
  message: string;
  metadata: T;
  option: Record<string, any>;
  timestamp: string;
}

// User entity interface
export interface User {
  usr_id: number;
  usr_email: string;
  usr_name: string;
  usr_avatar: string;
  usr_status: string;
  usr_sex: string;
  usr_slug: string;
  usr_number_tokens_received_today: number;
  usr_total_token: number;
  usr_role: number;
  is_deleted: 0 | 1;
  createdAt: string;
  updatedAt: string;
}

// Metadata structure for user list responses
interface UserListMetadata {
  users: User[];
}

// Structure for the transformed response of getListUser query
export interface UserListResponse {
  listUser: User[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// --- API Slice Definition ---
export const userApiSlice = createApi({
  reducerPath: 'userApi',
  baseQuery: apiBaseQuery,
  tagTypes: ['User'],
  endpoints: (builder) => ({
    /**
     * Fetches a paginated list of users.
     */
    getListUser: builder.query<UserListResponse, void>({
      query: () => '/user/users',
      /**
       * Transforms the raw API response into the desired UserListResponse structure.
       * Handles potential errors and extracts pagination details.
       */
      transformResponse: (
        response: ApiResponse<UserListMetadata>
      ): UserListResponse => {
        // Default pagination values
        const defaultPagination = {
          total: 0,
          page: 1,
          limit: 20,
          totalPages: 1
        };

        // Handle API errors or missing metadata
        if (!response.metadata || response.statusCode >= 400) {
          console.error(
            'API Error fetching users:',
            response.message || 'Unknown error',
            'Status:',
            response.statusCode
          );
          return {
            listUser: [],
            ...defaultPagination
          };
        }

        // Ensure metadata.users is an array
        const listUser = Array.isArray(response.metadata)
          ? response.metadata
          : [];

        // Extract pagination from options, providing defaults
        const pagination = response.option?.pagination ?? defaultPagination;

        return {
          listUser,
          total: pagination.total ?? 0,
          page: pagination.page ?? 1,
          limit: pagination.limit ?? 20,
          totalPages: pagination.totalPages ?? 1
        };
      },
      /**
       * Provides cache tags for the fetched user list and individual users.
       * Enables automatic refetching when mutations invalidate these tags.
       */
      providesTags: (result) =>
        result && result.listUser
          ? [
              // Tag for the entire list
              { type: 'User', id: 'LIST' },
              // Tags for each individual user in the list
              ...result.listUser.map(({ usr_id }) => ({
                type: 'User' as const,
                id: usr_id
              }))
            ]
          : [{ type: 'User', id: 'LIST' }]
    }),

    /**
     * Changes the user's password
     */
    changePassword: builder.mutation<
      { success: boolean; message: string },
      { oldPassWord: string; newPassword: string }
    >({
      query: (passwordData) => ({
        url: '/user/change-password',
        method: 'PATCH',
        body: passwordData
      }),
      invalidatesTags: [{ type: 'User', id: 'LIST' }]
    }),

    getCIDAddress: builder.query<{ address: string }, void>({
      query: () => '/manga/contract-address/cid-storage',
      transformResponse: (response: ApiResponse<string>) => {
        if (!response.metadata) {
          throw new Error("Don't get CID address");
        }
        return { address: response.metadata }; // 'cid' needs a value; replace '' if available
      }
    })
  })
});

// Export hooks generated by RTK Query for usage in components
export const {
  useGetListUserQuery,
  useChangePasswordMutation,
  useGetCIDAddressQuery
} = userApiSlice;
